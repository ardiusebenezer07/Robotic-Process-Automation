import heapq
from typing import List, Tuple, Dict, Set

class Node:
    def __init__(self, position: Tuple[int, int], g_cost: float, h_cost: float, parent=None):
        self.position = position
        self.g_cost = g_cost  # Biaya dari titik awal ke node ini
        self.h_cost = h_cost  # Perkiraan biaya dari node ini ke tujuan (heuristic)
        self.f_cost = g_cost + h_cost  # Total biaya
        self.parent = parent

    def __lt__(self, other):
        return self.f_cost < other.f_cost

class AStar:
    def __init__(self, grid: List[List[int]]):
        self.grid = grid
        self.rows = len(grid)
        self.cols = len(grid[0])
        
    def heuristic(self, pos: Tuple[int, int], target: Tuple[int, int]) -> float:
        """
        Menghitung jarak Manhattan sebagai heuristic
        """
        return abs(pos[0] - target[0]) + abs(pos[1] - target[1])
    
    def get_neighbors(self, pos: Tuple[int, int]) -> List[Tuple[int, int]]:
        """
        Mendapatkan semua tetangga yang valid dari suatu posisi
        """
        neighbors = []
        # Gerakan yang mungkin: atas, kanan, bawah, kiri
        directions = [(-1, 0), (0, 1), (1, 0), (0, -1)]
        
        for dx, dy in directions:
            new_x, new_y = pos[0] + dx, pos[1] + dy
            
            # Cek apakah posisi baru valid dan bukan rintangan
            if (0 <= new_x < self.rows and 
                0 <= new_y < self.cols and 
                self.grid[new_x][new_y] != 1):  # 1 menandakan rintangan
                neighbors.append((new_x, new_y))
                
        return neighbors
    
    def find_path(self, start: Tuple[int, int], target: Tuple[int, int]) -> List[Tuple[int, int]]:
        """
        Mencari jalur optimal menggunakan algoritma A*
        """
        # Inisialisasi node awal
        start_node = Node(start, 0, self.heuristic(start, target))
        
        # Priority queue untuk open set
        open_set = []
        heapq.heappush(open_set, start_node)
        
        # Dictionary untuk menyimpan node yang sudah dievaluasi
        closed_set: Set[Tuple[int, int]] = set()
        
        # Dictionary untuk menyimpan node yang sedang dalam open set
        open_dict: Dict[Tuple[int, int], Node] = {start: start_node}
        
        while open_set:
            current = heapq.heappop(open_set)
            current_pos = current.position
            
            # Hapus dari open_dict karena sudah di-pop
            if current_pos in open_dict:
                del open_dict[current_pos]
            
            # Jika mencapai target, rekonstruksi jalur
            if current_pos == target:
                path = []
                while current:
                    path.append(current.position)
                    current = current.parent
                return path[::-1]  # Balik urutan jalur
            
            # Tambahkan ke closed set
            closed_set.add(current_pos)
            
            # Evaluasi semua tetangga
            for neighbor_pos in self.get_neighbors(current_pos):
                # Skip jika sudah dievaluasi
                if neighbor_pos in closed_set:
                    continue
                
                # Hitung biaya ke tetangga
                g_cost = current.g_cost + 1  # Biaya bergerak ke tetangga
                h_cost = self.heuristic(neighbor_pos, target)
                
                # Buat node baru untuk tetangga
                neighbor = Node(neighbor_pos, g_cost, h_cost, current)
                
                # Jika tetangga sudah di open set dengan biaya lebih rendah, skip
                if (neighbor_pos in open_dict and 
                    open_dict[neighbor_pos].g_cost <= g_cost):
                    continue
                
                # Tambahkan atau update tetangga di open set
                open_dict[neighbor_pos] = neighbor
                heapq.heappush(open_set, neighbor)
        
        # Jika tidak ditemukan jalur
        return []

def print_path(grid: List[List[int]], path: List[Tuple[int, int]]) -> None:
    """
    Menampilkan grid dengan jalur yang ditemukan
    """
    # Buat salinan grid
    display_grid = [row[:] for row in grid]
    
    # Tandai jalur dengan '*'
    for x, y in path:
        display_grid[x][y] = '*'
    
    # Tampilkan grid
    for row in display_grid:
        print(' '.join(['#' if cell == 1 else '*' if cell == '*' else '.' for cell in row]))

# Contoh penggunaan
if __name__ == "__main__":
    # Buat grid (0 = kosong, 1 = rintangan)
    grid = [
        [0, 0, 0, 0, 0],
        [0, 1, 1, 0, 0],
        [0, 0, 0, 0, 0],
        [0, 1, 1, 1, 0],
        [0, 0, 0, 0, 0]
    ]
    
    # Inisialisasi A*
    astar = AStar(grid)
    
    # Tentukan titik awal dan tujuan
    start = (0, 0)
    target = (4, 4)
    
    # Cari jalur
    path = astar.find_path(start, target)
    
    # Tampilkan hasil
    if path:
        print("Jalur ditemukan:")
        print_path(grid, path)
        print(f"\nPanjang jalur: {len(path)}")
        print(f"Jalur: {path}")
    else:
        print("Tidak ditemukan jalur ke tujuan")
TASK 1 :

from robot_control_class import RobotControl
import math

def get_highest_lowest():
    rc = RobotControl()
    laser = rc.get_laser_full()
    laser_dict = {}
    output = []
    for i, elem in enumerate(laser):
        if not math.isinf(elem):
            laser_dict[i] = elem
    max_val = max(laser_dict.values())
    min_val = min(laser_dict.values())
    print(max_val, min_val)

    for key, val in laser_dict.items():  # for name, age in dictionary.iteritems():  (for Python 2.x)
        if val == max_val:
            output.append(key)
            break

    for key, val in laser_dict.items():  # for name, age in dictionary.iteritems():  (for Python 2.x)
        if val == min_val:
            output.append(key)
            break
    return output

max_index, min_index = get_highest_lowest()
print(max_index, min_index)





TASK 2 :

from robot_control_class import RobotControl
import math

rc = RobotControl()
laser = rc.get_laser_full()

while laser[360] >= 1:
    rc.move_straight()
    laser = rc.get_laser_full()
rc.stop_robot()

rc.turn("clockwise", 0.2, 7)




TASK 3 :

from robot_control_class import RobotControl
import math

class ExamControl:
    def get_laser_readings(self):
        output = []
        rc = RobotControl()
        laser = rc.get_laser_full()
        output.append(laser[719])
        output.append(laser[0])        
        return output
    
    def main(self):
        rc = RobotControl()
        d_left, d_right = self.get_laser_readings()
        print(d_left, d_right)
        while True:
            rc.move_straight()
            d_left, d_right = self.get_laser_readings()
            print(d_left, d_right)
            if ( math.isinf(d_left)) and ( math.isinf(d_right)):
                break
        rc.stop_robot()

testMove = ExamControl()
testMove.main()